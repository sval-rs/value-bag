name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install Rust toolchain
        run: rustup default nightly

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - name: All
        run: cargo test --all-features

      - name: Powerset
        run: cargo hack test --feature-powerset --depth 4 --lib

  embedded:
    name: Build (embedded)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install Rust toolchain
        run: |
          rustup default nightly
          rustup target add thumbv6m-none-eabi

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - name: Powerset
        run: cargo hack check --each-feature --exclude-features std,test,error,owned -Z avoid-dev-deps --target thumbv6m-none-eabi

  nodeps:
    name: Build (no dev deps)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install Rust toolchain
        run: rustup default nightly

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - name: Powerset
        run: cargo hack check --feature-powerset --depth 4 -Z avoid-dev-deps

  minimaldeps:
    name: Build (minimal versions)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install Rust toolchain
        run: rustup default nightly

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - name: Powerset
        run: cargo hack check --each-feature --lib -Z minimal-versions -Z avoid-dev-deps

  benches:
    name: Build (benches)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install Rust toolchain
        run: rustup default nightly

      - name: Benches
        run: cargo bench --no-run --features "error sval2 serde1"

  wasm:
    name: Test (wasm)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: All features
        run: wasm-pack test --node -- --all-features

  msrv:
    name: Test (MSRV)
    runs-on: ubuntu-latest
    env:
      MSRV_TOOLCHAIN: 1.61.0
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Default features
        run: cargo +$MSRV_TOOLCHAIN build --features "std owned seq sval2 serde1"

  miri:
    name: Test (miri)
    runs-on: ubuntu-latest
    env:
      MIRI_TOOLCHAIN: nightly-2023-03-26
    steps:
      - name: Checkout sources
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Install miri
        run: rustup +$MIRI_TOOLCHAIN component add miri

      - name: Default features
        run: cargo +$MIRI_TOOLCHAIN miri test
